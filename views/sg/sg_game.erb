<%
%>

<style>
.highlighted {
  color: gold;
}
.box {
  height: 200px;
  width: 200px;
  background-color: lightgreen;
  /*margin:20px;*/
  border:1px solid black;
  display: inline-block;
  vertical-align: top;
  text-align: center;
  font-size: 30px;
  cursor: pointer;
  position: relative;
}
.box .val.sample_val {
  color: black;
}
.box .val.choose_val {
  color: red;
  font-weight: bold;
  position: relative;
}
.box .val {
/*  border:1px solid blue;*/
  width:20px;
  height:20px;
  position: absolute;
  bottom:-30px;
  left:30%;
}
.disabled {
  cursor: not-allowed;
}
.box.disabled {
  background-color: grey !important;  
  /*color:white;*/
}

.mm.box.disabled:after {
  content: 'Chosen';
  color: white;
}

.box.blocked {
  background-color: lightgrey;
  padding-top:20px;
  /*font-size:100px;*/
  cursor: not-allowed;
  color:red;
}
/*.sample_or_choose {
  background-color: lightblue;
  display: inline-block;
  width: 150px;

  cursor: not-allowed;
  font-weight: bold;
  text-align: center;
}
.sample_or_choose.disabled {
  font-weight: normal;
  cursor: pointer;
  background-color: whitesmoke;
}*/
.not_your_turn, .wait_for_others_to_join, .wait_for_others_to_approve_practice, .showRoundOver, .awaiting_oks {
  position: absolute;
  height: 100%;
  width: 80%;
  opacity: 0.6;
  font-size:50px;
  color: black;
  font-weight: bold;
  background-color: lightgrey;
  z-index: 999;
}

.showRoundOver {
  text-align: left;
  padding-left: 10%;
  opacity: 1;
  /*background-color: darkgreen;*/  
}
</style>

<div class='awaiting_oks' style='text-align: center; display: none; opacity: 1; background-color: transparent; margin-top:170px'>
      <div style=''>
        Wait for everyone to click OK
      </div>
</div>


<div class='not_your_turn' style='text-align: center; display: none; opacity: 1; background-color: transparent; margin-top:170px'>
      <div style=''>
        Wait for other players to move
      </div>
</div>

<div class='wait_for_others_to_join' style='text-align: center; margin-top:170px'>
      <div style=''>
        Wait for other players to join
      </div>
</div>

<div class='wait_for_others_to_approve_practice' style='text-align: center; display: none; margin-top: 170px'>
      <div style=''>
        Wait for other players to start
      </div>
</div>

<div class='showRoundOver noDisplay' style='text-align: left; font-weight: normal; display: none'>
      <div style='margin-top:100px'>
        <div> The round is finished. </div>
         <div> Your outcome for the round is <span class='showRoundOverVal' style='font-weight: bold;'></span>.</div>      
      <div>In the next round, </div>
      <div> you will be given a new set of buttons.</div>
      <div><button style='margin-top: 20px; background-color: green; color: black; width: 300px' onclick="$('.showRoundOver').hide(); $.post('/sg/clicked_ok'); if (window.awaiting_oks==1) $('.awaiting_oks').hide()" autofocus> OK </button></div>
      </div>
</div>

<h1> The Sampling Game </h1>

<div style='font-size:30px; font-weight: bold'><span class='round_num_is_practice'>Practice</span> Round <span class='round_num'></span>
<span class='out_of_rounds_num'>/ <%= get_setting(:sampling_game_nrounds).to_i%></span>
</div>
<section style='margin-bottom: 20px;'>
  
  Action Type:  
  <div class='btn btn-raised btn-primary sample_or_choose sample disabled' onclick=sampleOrChooseState("sample")>
  Sample
  </div>
  <div class='btn btn-raised btn-primary sample_or_choose choose' onclick=sampleOrChooseState("choose")>
  Choose
  </div>
</section>

<section>
<div class='box 1' onclick=onBoxClick(1)>  <div class='val'></div></div>
<div class='box 2' onclick=onBoxClick(2)>  <div class='val'></div></div>
<div class='box 3' onclick=onBoxClick(3)>  <div class='val'></div></div>
<div class='box 4' onclick=onBoxClick(4)>  <div class='val'></div></div>
</section>

<div class='status' style='margin-top:100px'>
</div>
<!-- <div class='curTurnHolder'>Current Turn: <span class='curTurn'></span></div> -->
<script>
log = console.log
user_id = "<%= sesh[:user_id] %>";
//window.time = 2;
window.practice_over = false;
window.clickingEnabled= true;
$('.box'+' .val').show();
// function updateTurn(user_id) {
//   //$('.curTurn').html(user_id)
//   if (user_id == window.user_id) {
//       $('.not_your_turn').hide();   
//       clickingEnabled = true;    
//   } else {
//    $('.not_your_turn').show(); 
//  }
// }

localStorage.removeItem('myLastChosenVal');
function showRoundOver() {
  if (localStorage.myLastChosenVal) {
    $('.showRoundOver').show()
    $('.box').removeClass('disabled').removeClass('blocked')
    $('.box .val').removeClass('disabled').removeClass('blocked')      
    window.already_chosen = false;
    window.clickingEnabled = true;
    $('.showRoundOver .showRoundOverVal').html(localStorage.myLastChosenVal);  
    $("#ok_round_over_btn").focus()
  }  
}

function refreshData() { 
  $.get('/sg/state?game_id=<%=sesh[:game_id]%>').success(r=>{
    window.data = r;  
    var data = r;

    //on new round
    //if (window.d && (data.round > window.d.round)) { $('.box').removeClass('disabled') }
    //console.log(r.game_over)
    if (r.game_over) {
      alert('game over!')
      document.location.href = '/sg/game_over'
    }

    window.awaiting_oks = r.awaiting_oks;
    console.log('awaiting oks: ',r.awaiting_oks)
    if (r.awaiting_oks) {
      $('.awaiting_oks').show();
    } else {
      $('.awaiting_oks').hide();
    }

    <% num_users = get_num_players %>
    window.numModUsers=<%= num_users %>;
    log('numModUsers', window.numModUsers)
    if (window.data.user_ids.length % numModUsers != 0 ) {
      $('.wait_for_others_to_join').show();
      //return alert('There are currently '+window.d.user_ids.length+' users connected; please wait until the number of users is '+numModUsers)
    } else {
      $('.wait_for_others_to_join').hide();
    }


    var firstRealRound = false;
    if (r.practice_over && !window.practice_over) {
      window.practice_over = true;
      firstRealRound = true;
      <% if $prod %>
      alert('Practice is over!');
      <% end %>
    }


    //$('.not_your_turn').show()
      
    //var curTurn = (data.user_ids[data.turn % data.user_ids.length])
    var curTurn = data.cur_turn;
    //updateTurn(curTurn)

    data.user_id = window.user_id;

    //new round 
    if (data.chosen_buttons.length == 0) { 
      $('.box').removeClass('disabled').removeClass('blocked')
      $('.box .val').removeClass('disabled').removeClass('blocked')      
      window.already_chosen = false;
    }

    //mark blocked boxes
    allowed_boxes = data.roles[data.user_ids.indexOf(window.user_id)];
    blocked_boxes = [1,2,3,4].filter(z=>allowed_boxes.indexOf(z)==-1)
    console.log('blocked boxes: ',blocked_boxes)
    blocked_boxes.forEach(idx=> { 
      $('.box.'+idx).addClass('blocked')
      $('.box.'+idx+' .val').addClass('blocked')//.html("<i class='fa fa-close'></i>");
    })

    data.chosen_buttons.forEach(boxID=>{
      $('.box.'+boxID).addClass('disabled')
      //$('.box.'+boxID+' .val').html('Chosen');
      if (boxID==data.my_chosen_btn) {
        //$('.box.'+boxID+' .val').html('Chosen: '+data.my_chosen_value);
      }
    })

    if ((window.phase == 'sample') && oneChoiceLeft()) { //last choice
      sampleOrChooseState('choose');
    }

    window.d = data;
    delete data.rounds_order;
    
    <% if get_setting(:sampling_game_show_data) == 'on' %>
    if (true || localStorage.showData) $('.status').html(JSON.stringify(data))
    <% end %>

    var highlight = false;    
    var round_num_text = parseInt(data.round)+1;
    if (window.practice_over) {      
      $('.round_num_is_practice').hide()
      $('.out_of_rounds_num').show()
    } else {
      $('.out_of_rounds_num').hide()
      $('.round_num_is_practice').show()
    }

    if (data.round > (parseInt($('.round_num').text())-1)) {
      highlight = true;      
    }

    data.users_sampled = data.users_sampled || [];
    data.users_chosen = data.users_chosen || [];
    console.log('data.users_sampled', data.users_sampled)
    window.user_has_chosen = data.users_chosen.indexOf(user_id)>-1;
    if (user_has_chosen) {
      clickingEnabled = false;      
      $('.not_your_turn').show();
    } else if (data.users_sampled.length == 0) {
        clickingEnabled = true;      
        $('.not_your_turn').hide();
      } else if (data.users_sampled.indexOf(user_id)>-1) {
        clickingEnabled = false;      
        $('.not_your_turn').show();  
      } else {
        clickingEnabled = true;      
        $('.not_your_turn').hide();
      }

    if (highlight || firstRealRound) {
      clickingEnabled = true;      
      $('.round_num').addClass('highlighted'); 
      showRoundOver();     
      sampleOrChooseState('sample')
      $('.not_your_turn').hide()
      setTimeout(function () {
        $('.round_num').removeClass('highlighted');                
      }, 1000); 
      $('.box'+' .val').fadeOut(1500).removeClass('sample_val').removeClass('choose_val')
        setTimeout(()=>$('.box'+' .val').html('').show(),1500);
      highlight = false;
    }
    $('.round_num').html(round_num_text);    

    <% if $prod %>
    setTimeout(refreshData,(window.time || 1) * 100)    
    <% else %>
    setTimeout(refreshData,(window.time || 1) * 1500)
    <% end %>
  })
}

function onBoxClick(a) {
  if ($('.box.'+a).hasClass('disabled') || $('.box.'+a).hasClass('blocked')) {
    return;
  }
  if (!window.clickingEnabled) {
    console.log('skipping since clickingEnabled is false')
    return
  }
  if (window.user_has_chosen) {
    console.log('skipping since user has already chosen')
    return
  }
  
  window.already_chosen  = true;
  clickingEnabled = false;
  
  $('.not_your_turn').show()
  var id = a;
  $.get('/sg/move?game_id=<%=sesh[:game_id]%>&box='+id+'&phase='+window.phase).success(r=> {
    if (phase == 'choose') {
      localStorage.myLastChosenVal = r.val;
      r.val = 'Chosen: '+r.val;
    }
    $('.box'+' .val').html('');
    $('.box.'+id+' .val').html(r.val).addClass(window.phase+'_val').show();
    if (window.phase == 'sample') {
      setTimeout(()=> {
        clickingEnabled = true;
        $('.box.'+id+' .val').html('').removeClass('sample_val').removeClass('choose_val')
      },(1500));        
    } else {      
    }   
  })
}

function oneChoiceLeft() {
  return ((data.user_ids.length > 1) && ($(".box").not('.blocked').not('.disabled').length==1))
}

window.phase = 'sample';
function sampleOrChooseState(state) {
  if (state == 'sample' && oneChoiceLeft()) { //last choice
    alert('The other option was chosen by another player, thus you have to choose the remaining option.')
    return;
  }
  window.phase = state;
  $('.sample_or_choose').removeClass('disabled')
  $('.sample_or_choose.'+state).addClass('disabled')
}
//$('.sample_or_choose').click()

//$('.box').addClass('disabled')
//$('.box').click(onBoxClick)


//setInterval(refreshData,window.time || 1 * 1000)
refreshData()
</script>